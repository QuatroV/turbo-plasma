// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    // TODO: Fix env variable and connect through env("DATABASE_URL")
    url      = "postgresql://postgres:password@localhost:5432/plasma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @unique @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    password      String?
    image         String?
    surname       String
    isBanned      Boolean
    role          Role         @default(STUDENT)
    CourseUser    CourseUser[]

    accounts Account[]
    sessions Session[]

    @@unique([email, password])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id         String       @id @unique @default(cuid())
    name       String       @default("")
    shortInfo  String       @default("")
    private    Boolean?     @default(false)
    lessons    Lesson[]
    CourseUser CourseUser[]
}

model Lesson {
    id       String  @id @unique @default(cuid())
    name     String  @default("")
    tasks    Task[]
    content  String?
    Course   Course? @relation(fields: [courseId], references: [id])
    courseId String?
}

model Task {
    id             String     @id @unique @default(cuid())
    name           String?
    content        String
    solutions      Solution[]
    tests          Test[]
    Lesson         Lesson?    @relation(fields: [lessonId], references: [id])
    lessonId       String?
    expectedResult String
}

model CourseUser {
    id         String     @id @unique @default(cuid())
    user       User       @relation(fields: [userId], references: [id])
    course     Course     @relation(fields: [courseId], references: [id])
    courseRole CourseRole @default(LISTENER)
    userId     String
    courseId   String
    solutions  Solution[]
}

model Solution {
    id           String      @id @unique @default(cuid())
    solver       CourseUser? @relation(fields: [courseUserId], references: [id])
    content      Bytes?
    mark         Mark?       @relation(fields: [markId], references: [id])
    Task         Task?       @relation(fields: [taskId], references: [id])
    taskId       String?
    courseUserId String?
    markId       String?
}

model Test {
    id     String  @id @unique @default(cuid())
    result String
    Task   Task?   @relation(fields: [taskId], references: [id])
    taskId String?
}

model Mark {
    id       String     @id @unique @default(cuid())
    value    Int
    Solution Solution[]
}

enum Role {
    ADMIN
    TEACHER
    STUDENT
}

enum CourseRole {
    OWNER
    MODERATOR
    LISTENER
}
