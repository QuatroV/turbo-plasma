// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  // TODO: Fix env variable and connect through env("DATABASE_URL")
  url      = "postgresql://postgres:password@localhost:5432/plasma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @unique @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  surname       String
  isBanned      Boolean
  role          Role         @default(STUDENT)
  CourseUser    CourseUser[]

  accounts Account[]
  sessions Session[]
  Comment  Comment[]
  Solution Solution[]

  @@unique([email, password])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id         String       @id @unique @default(cuid())
  name       String       @default("")
  shortInfo  String       @default("")
  private    Boolean?     @default(false)
  lessons    Lesson[]
  CourseUser CourseUser[]
  topics     Topic[]
}

model Lesson {
  id       String    @id @unique @default(cuid())
  name     String    @default("")
  tasks    Task[]
  content  String?
  Course   Course?   @relation(fields: [courseId], references: [id])
  courseId String?
  meta     Json?
  Comment  Comment[]

  Topic   Topic?  @relation(fields: [topicId], references: [id])
  topicId String?
}

model Task {
  id             String     @id @unique @default(cuid())
  name           String?
  content        String
  solutions      Solution[]
  Lesson         Lesson?    @relation(fields: [lessonId], references: [id])
  lessonId       String?
  expectedResult String
}

model CourseUser {
  id         String     @id @unique @default(cuid())
  user       User       @relation(fields: [userId], references: [id])
  course     Course     @relation(fields: [courseId], references: [id])
  courseRole CourseRole @default(LISTENER)
  userId     String
  courseId   String
}

model Solution {
  id       String  @id @unique @default(cuid())
  solver   User?   @relation(fields: [solverId], references: [id])
  content  Bytes?
  mark     Int?     
  Task     Task?   @relation(fields: [taskId], references: [id])
  taskId   String?
  solverId String?
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @unique @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  createdAt DateTime @default(now())
}

model Topic {
  id       String   @id @unique @default(cuid())
  name     String
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  Lesson   Lesson[]
  color    String
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum CourseRole {
  OWNER
  MODERATOR
  LISTENER
}
